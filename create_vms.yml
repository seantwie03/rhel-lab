- name: Create virtual machines for RHEL lab environment (not idempotent)
  hosts: localhost
  connection: local
  become: true

  vars_files:
    - vars/rhel_lab_vars.yml

  roles:
    - role: virtualization
      vars:
        libvirt_users:
          - "{{ user_name }}"

  tasks:
    - name: Ensure lab-example-com network is configured and running
      block:
        - name: Define lab-example-com network
          community.libvirt.virt_net:
            command: define
            name: lab-example-com
            xml: >
              <network>
                <name>lab-example-com</name>
                <forward mode="nat" />
                <domain name="lab-example-com" />
                <ip address="172.25.250.1" netmask="255.255.255.0">
                    <dhcp>
                        <range start="172.25.250.128" end="172.25.250.254" />
                    </dhcp>
                </ip>
              </network>

        - name: Create lab-example-com network
          community.libvirt.virt_net:
            command: create
            name: lab-example-com

        - name: Ensure lab-example-com is active
          community.libvirt.virt_net:
            name: lab-example-com
            state: active

        - name: Ensure lab-example-com is set to autostart
          community.libvirt.virt_net:
            name: lab-example-com
            autostart: true

    - name: Stage kickstart files
      block:
        - name: Ensure kickstarts directory exists
          ansible.builtin.file:
            path: /var/lib/libvirt/kickstarts
            state: directory
            owner: root
            group: qemu
            mode: "0755"
            setype: virt_content_t

        - name: Template graphical workstation kickstart files
          ansible.builtin.template:
            src: files/ks-server.cfg.j2
            dest: /var/lib/libvirt/kickstarts/ks-{{ item.hostname }}.cfg
            owner: root
            group: qemu
            mode: "0644"
            setype: virt_content_t
          loop: "{{ graphical_workstations }}"

        - name: Template headless server kickstart files
          ansible.builtin.template:
            src: files/ks-server.cfg.j2
            dest: /var/lib/libvirt/kickstarts/ks-{{ item.hostname }}.cfg
            owner: root
            group: qemu
            mode: "0644"
            setype: virt_content_t
          loop: "{{ headless_servers }}"

    - name: Create graphical workstations
      block:
        - name: Create the graphical workstation virtual machines
          ansible.builtin.command:
            cmd: >
              virt-install
              --name={{ item.hostname }}
              --os-type=linux
              --os-variant={{ os_variant }}
              --vcpus=2
              --ram=6000
              --network network=lab-example-com
              --disk {{ iso_path }},device=cdrom,readonly=on
              --disk path=/var/lib/libvirt/images/{{ item.hostname }}-os.qcow2,size=20,boot.order=1
              --location {{ iso_path }}
              --initrd-inject=/var/lib/libvirt/kickstarts/ks-{{ item.hostname }}.cfg
              --extra-args="inst.ks=file:ks-{{ item.hostname }}.cfg"
              --noautoconsole
            creates: /etc/libvirt/qemu/{{ item.hostname }}.xml
          loop: "{{ graphical_workstations }}"

    - name: Create headless servers
      block:
        - name: Create the headless server virtual machines
          ansible.builtin.command:
            cmd: >
              virt-install
              --name={{ item.hostname }}
              --os-type=linux
              --os-variant={{ os_variant }}
              --vcpus=1
              --ram=2048
              --network network=lab-example-com
              --disk {{ iso_path }},device=cdrom,readonly=on
              --disk path=/var/lib/libvirt/images/{{ item.hostname }}-os.qcow2,size=10,boot.order=1
              --disk path=/var/lib/libvirt/images/{{ item.hostname }}-1.qcow2,size=5,boot.order=2
              --disk path=/var/lib/libvirt/images/{{ item.hostname }}-2.qcow2,size=5,boot.order=3
              --disk path=/var/lib/libvirt/images/{{ item.hostname }}-3.qcow2,size=5,boot.order=4
              --location {{ iso_path }}
              --initrd-inject=/var/lib/libvirt/kickstarts/ks-{{ item.hostname }}.cfg
              --extra-args="inst.ks=file:ks-{{ item.hostname }}.cfg"
              --noautoconsole
            creates: /etc/libvirt/qemu/{{ item.hostname }}.xml
          loop: "{{ headless_servers }}"

    - name: Configure host for easy lab access
      block:
        - name: Add graphical workstations to hosts file
          ansible.builtin.lineinfile:
            path: /etc/hosts
            regexp: ^{{ item.ip }}|\s{{ item.hostname }}
            line: "{{ item.ip }} {{ item.hostname }} {{ item.hostname }}.lab.example.com"
            state: present
          loop: "{{ graphical_workstations }}"

        - name: Add headless servers to hosts file
          ansible.builtin.lineinfile:
            path: /etc/hosts
            regexp: ^{{ item.ip }}|\s{{ item.hostname }}
            line: "{{ item.ip }} {{ item.hostname }} {{ item.hostname }}.lab.example.com"
            state: present
          loop: "{{ headless_servers }}"

        - name: Ensure .ssh directory exists
          ansible.builtin.file:
            path: "/home/{{ user_name }}/.ssh"
            state: directory
            mode: "0700"
            owner: "{{ user_name }}"
            group: "{{ user_name }}"

        - name: Copy rhel lab key
          ansible.builtin.copy:
            src: files/rhel_lab_key
            dest: "/home/{{ user_name }}/.ssh/rhel_lab_key"
            mode: "0600"
            owner: "{{ user_name }}"
            group: "{{ user_name }}"

        - name: Create SSH config for headless servers
          ansible.builtin.blockinfile:
            path: "/home/{{ user_name }}/.ssh/config"
            create: true
            mode: "0600"
            owner: "{{ user_name }}"
            group: "{{ user_name }}"
            block: |
              Host {{ item.hostname }}
                Hostname {{ item.hostname }}.lab.example.com
                User student
                IdentityFile ~/.ssh/rhel_lab_key
            marker: "# {mark} ANSIBLE MANAGED BLOCK FOR RHEL LAB - {{ item.hostname }}"
          loop: "{{ headless_servers }}"

        - name: Create SSH config for root access to headless servers
          ansible.builtin.blockinfile:
            path: "/home/{{ user_name }}/.ssh/config"
            create: true
            mode: "0600"
            owner: "{{ user_name }}"
            group: "{{ user_name }}"
            block: |
              Host {{ item.hostname }}-root
                Hostname {{ item.hostname }}.lab.example.com
                User root
                IdentityFile ~/.ssh/rhel_lab_key
            marker: "# {mark} ANSIBLE MANAGED BLOCK FOR RHEL LAB - {{ item.hostname }} - root access"
          loop: "{{ headless_servers }}"

        - name: Create SSH config for graphical workstations
          ansible.builtin.blockinfile:
            path: "/home/{{ user_name }}/.ssh/config"
            create: true
            mode: "0600"
            owner: "{{ user_name }}"
            group: "{{ user_name }}"
            block: |
              Host {{ item.hostname }}
                Hostname {{ item.hostname }}.lab.example.com
                User student
                IdentityFile ~/.ssh/rhel_lab_key
            marker: "# {mark} ANSIBLE MANAGED BLOCK FOR RHEL LAB - {{ item.hostname }}"
          loop: "{{ graphical_workstations }}"

        - name: Create SSH config for root access to graphical workstations
          ansible.builtin.blockinfile:
            path: "/home/{{ user_name }}/.ssh/config"
            create: true
            mode: "0600"
            owner: "{{ user_name }}"
            group: "{{ user_name }}"
            block: |
              Host {{ item.hostname }}-root
                Hostname {{ item.hostname }}.lab.example.com
                User root
                IdentityFile ~/.ssh/rhel_lab_key
            marker: "# {mark} ANSIBLE MANAGED BLOCK FOR RHEL LAB - {{ item.hostname }} - root access"
          loop: "{{ headless_servers }}"
